{"ast":null,"code":"import _objectSpread from \"/home/valeriy-baraban/git/react/front-react-coding-challenge-master/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport { types } from '../actions/message.actions';\nconst initialState = {\n  messages: []\n};\n\nconst messageReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.ADD_MESSAGE:\n      {\n        const newMessage = action.newMessage;\n        let newMessages = [...state.messages];\n        newMessages.sort((a, b) => Date.parse(b.date) - Date.parse(a.date));\n        newMessages = [newMessage, ...newMessages];\n        return _objectSpread({}, state, {\n          messages: [...newMessages]\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default messageReducer;","map":{"version":3,"sources":["/home/valeriy-baraban/git/react/front-react-coding-challenge-master/src/redux/reducers/message.reducer.js"],"names":["types","initialState","messages","messageReducer","state","action","type","ADD_MESSAGE","newMessage","newMessages","sort","a","b","Date","parse","date"],"mappings":";AAAA,SAASA,KAAT,QAAsB,4BAAtB;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE;AADS,CAArB;;AAIA,MAAMC,cAAc,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKN,KAAK,CAACO,WAAX;AAAwB;AAAA,cACdC,UADc,GACCH,MADD,CACdG,UADc;AAEtB,YAAIC,WAAW,GAAG,CAAC,GAAGL,KAAK,CAACF,QAAV,CAAlB;AACAO,QAAAA,WAAW,CAACC,IAAZ,CAAiB,CAACC,CAAD,EAAIC,CAAJ,KAAUC,IAAI,CAACC,KAAL,CAAWF,CAAC,CAACG,IAAb,IAAqBF,IAAI,CAACC,KAAL,CAAWH,CAAC,CAACI,IAAb,CAAhD;AACAN,QAAAA,WAAW,GAAG,CAACD,UAAD,EAAa,GAAGC,WAAhB,CAAd;AACA,iCACKL,KADL;AAEEF,UAAAA,QAAQ,EAAE,CAAC,GAAGO,WAAJ;AAFZ;AAID;;AACD;AACE,aAAOL,KAAP;AAZJ;AAcD,CAfD;;AAiBA,eAAeD,cAAf","sourcesContent":["import { types } from '../actions/message.actions';\n\nconst initialState = {\n  messages: [],\n};\n\nconst messageReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.ADD_MESSAGE: {\n      const { newMessage } = action;\n      let newMessages = [...state.messages];\n      newMessages.sort((a, b) => Date.parse(b.date) - Date.parse(a.date));\n      newMessages = [newMessage, ...newMessages];\n      return {\n        ...state,\n        messages: [...newMessages],\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default messageReducer;\n"]},"metadata":{},"sourceType":"module"}