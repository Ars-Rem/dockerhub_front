{"version":3,"sources":["redux/actions/message.actions.js","redux/reducers/message.reducer.js","redux/reducers/index.js","redux/createStore.js","scenes/notFound404/index.jsx","scenes/Blog/components/Creator/index.jsx","scenes/Blog/components/Message/index.jsx","scenes/Blog/components/MessageList/index.jsx","scenes/Blog/index.jsx","scenes/Blog/container.js","redux/socket.wrapper.js","scenes/AppContainer.jsx","App.jsx","serviceWorker.js","index.js"],"names":["types","Object","freeze","ADD_MESSAGE","REMOVE_MESSAGE","AddMessageRequest","newMessage","type","initialState","messages","messageReducer","state","arguments","length","undefined","action","newMessages","toConsumableArray","sort","a","b","Date","parse","date","concat","objectSpread","reducers","combineReducers","store","createStore","rootReducer","composeWithDevTools","notFound404","react_default","createElement","Creator","_ref","addMessage","_useState","useState","message","_useState2","slicedToArray","setNewMessage","handleSubmit","e","persist","preventDefault","Form","onSubmit","Group","controlId","Label","Control","onKeyPress","event","key","onChange","target","value","as","rows","required","Button","variant","Message","MessageList","Fragment","map","i","components_Message","Blog","addMessageRequest","Container","components_Creator","components_MessageList","connect","dispatch","socket","connectSocket","io","on","data","JSON","customHistory","createBrowserHistory","AppContainer","useEffect","react_router","history","exact","from","to","path","component","App","es","rootStore","scenes_AppContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6193f858.chunk.js","sourcesContent":["export const types = Object.freeze({\n  ADD_MESSAGE: 'ADD_MESSAGE',\n  REMOVE_MESSAGE: 'REMOVE_MESSAGE',\n});\n\nexport const AddMessageRequest = newMessage => ({\n  type: types.ADD_MESSAGE,\n  newMessage,\n});\n","import { types } from '../actions/message.actions';\n\nconst initialState = {\n  messages: [],\n};\n\nconst messageReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case types.ADD_MESSAGE: {\n      const { newMessage } = action;\n      let newMessages = [...state.messages];\n      newMessages.sort((a, b) => Date.parse(b.date) - Date.parse(a.date));\n      newMessages = [newMessage, ...newMessages];\n      return {\n        ...state,\n        messages: [...newMessages],\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nexport default messageReducer;\n","import { combineReducers } from 'redux';\nimport messageReducer from './message.reducer';\n\nconst reducers = combineReducers({\n  messages: messageReducer,\n});\n\nexport default reducers;\n","import { createStore } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from './reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;\n","import React from 'react';\n\nfunction notFound404() {\n  return <div>404</div>;\n}\n\nexport default notFound404;\n","// @flow\nimport React, { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport { IMessage } from '../../models/message.model';\n\ntype Props = {\n  addMessage: (newMessage: IMessage) => {},\n};\n\nfunction Creator({ addMessage }: Props) {\n  const [newMessage, setNewMessage] = useState({ message: '', date: null });\n\n  const handleMessageChange = (e) => {\n    setNewMessage({\n      message: e.target.value,\n      date: new Date(),\n    });\n  };\n\n  const handleSubmit = (e) => {\n    e.persist();\n    e.preventDefault();\n    addMessage(newMessage);\n    setNewMessage({ date: null, message: '' });\n  };\n\n  const handleKeyPress = (event) => {\n    if (event.key === 'Enter') {\n      handleSubmit(event);\n    }\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.Group controlId=\"newMessage.message\">\n        <Form.Label>Message</Form.Label>\n        <Form.Control\n          onKeyPress={handleKeyPress}\n          onChange={handleMessageChange}\n          value={newMessage.message}\n          as=\"textarea\"\n          rows=\"3\"\n          required\n        />\n      </Form.Group>\n      <Button variant=\"primary\" type=\"submit\">\n        Submit\n      </Button>\n    </Form>\n  );\n}\n\nexport default Creator;\n","// @flow\nimport React from 'react';\nimport { IMessage } from '../../models/message.model';\n\ntype Props = {\n  newMessage: IMessage,\n};\n\nfunction Message({ newMessage }: Props) {\n  return <p>{newMessage.message}</p>;\n}\n\nexport default Message;\n","/* eslint-disable react/no-array-index-key */\n// @flow\nimport React from 'react';\nimport { IMessage } from '../../models/message.model';\nimport Message from '../Message';\n\ntype Props = {\n  messages: Array<IMessage>,\n};\n\nfunction MessageList({ messages }: Props) {\n  return (\n    <>\n      {messages && messages.map((message, i) => <Message key={`message_${i}`} newMessage={message} />)}\n    </>\n  );\n}\n\nexport default MessageList;\n","// @flow\nimport React from 'react';\nimport Container from 'react-bootstrap/Container';\nimport Creator from './components/Creator';\nimport MessageList from './components/MessageList';\nimport { IMessage } from './models/message.model';\n\ntype Props = {\n  addMessageRequest: (newMessage: IMessage) => Function,\n  messages: Array<IMessage>,\n};\n\ntype IAddMessage = (message: string) => Function;\n\nfunction Blog({ addMessageRequest, messages }: Props) {\n  const addMessage: IAddMessage = (newMessage) => {\n    addMessageRequest(newMessage);\n  };\n  return (\n    <Container>\n      <Creator addMessage={addMessage} />\n      <MessageList messages={messages} />\n    </Container>\n  );\n}\nexport default Blog;\n","import { connect } from 'react-redux';\nimport Blog from '.';\nimport { AddMessageRequest } from '../../redux/actions/message.actions';\n\nconst mapStateToProps = state => ({\n  messages: state.messages.messages,\n});\n\nconst mapActionsToProps = dispatch => ({\n  addMessageRequest: newMessage => dispatch(AddMessageRequest(newMessage)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapActionsToProps,\n)(Blog);\n","import io from 'socket.io-client';\nimport { AddMessageRequest } from './actions/message.actions';\nimport store from './createStore';\n\nlet socket = null;\n\nexport const connectSocket = () => {\n  socket = io('http://192.168.3.236:4730');\n  socket.on('new bleat', (data) => {\n    store.dispatch(AddMessageRequest(JSON.parse(data)));\n  });\n  return socket;\n};\n\nexport const disconnect = () => {\n  if (socket) {\n    socket.disconnect();\n  }\n};\n","import React, { useEffect } from 'react';\nimport {\n  Redirect, Route, Router, Switch,\n} from 'react-router';\nimport { createBrowserHistory } from 'history';\nimport notFound404 from './notFound404';\nimport Blog from './Blog/container';\nimport { connectSocket } from '../redux/socket.wrapper';\n\nconst customHistory = createBrowserHistory();\n\nfunction AppContainer() {\n  useEffect(() => {\n    connectSocket();\n  });\n  return (\n    <Router history={customHistory}>\n      <Switch>\n        <Redirect exact from=\"/\" to=\"/blog\" />\n        <Route path=\"/blog\" component={Blog} />\n        <Route component={notFound404} />\n      </Switch>\n    </Router>\n  );\n}\nexport default AppContainer;\n","// @flow\nimport React from 'react';\nimport { Provider } from 'react-redux';\nimport rootStore from './redux/createStore';\nimport AppContainer from './scenes/AppContainer';\n\nfunction App() {\n  return (\n    <Provider store={rootStore}>\n      <AppContainer />\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* eslint-disable no-undef */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// eslint-disable-next-line react/jsx-filename-extension\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}